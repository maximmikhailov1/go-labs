services:
  reverse-proxy:
    image: traefik:v3.1
    command: 
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=maxim@spmulabs.ru"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
  backend:
    build: ./backend
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "3000"

  frontend:
    build: 
      context: ./frontend/labs-front
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`spmulabs.ru`)"
      - "traefik.http.routers.frontend.entryPoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    deploy:
      mode: replicated
      replicas: 2
    environment:
      NEXT_PUBLIC_API_URL: "http://backend:3000" 
    depends_on:
      - backend

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Используем переменные!
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  letsencrypt:
  postgres_data: